Object subclass: #Pila	instanceVariableNames: 'Elementos'	classVariableNames: ''	poolDictionaries: ''	category: 'GRUPO2_PILAS'!!Pila methodsFor: 'as yet unclassified' stamp: 'GRUPO2 5/15/2018 12:24'!Apilar: elem		Elementos addFirst: elem.	"Transcript show: Elementos."! !!Pila methodsFor: 'as yet unclassified' stamp: 'HOLI 5/22/2018 15:34'!Cima	|long cima|	long:=Elementos size.	long>0 ifTrue:[		cima:=(Elementos at:1 asInteger)."		Transcript show:'La cima es: ',(Elementos at:1 asString).		Transcript cr."].	^cima! !!Pila methodsFor: 'as yet unclassified' stamp: 'OLI 5/21/2018 17:48'!Concatenar: p	|long i p1 elem pp|	pp:= p deepCopy.	p1:= pp Inversa.	long:= (p1 instVarNamed: 'Elementos') size.	i:=1.	[i<=long.] whileTrue:[		elem:=(p1 instVarNamed: 'Elementos') at:i.		Elementos addFirst: elem.		i:=i+1.].	! !!Pila methodsFor: 'as yet unclassified' stamp: 'HOLI 5/21/2018 11:18'!Desapilar	|elem long|	long:=Elementos size.	long>0 ifTrue:[		elem:=Elementos first.		Elementos removeFirst.		^elem.].! !!Pila methodsFor: 'as yet unclassified' stamp: 'Holi 5/15/2018 18:25'!Duplicar	|i long p1 p2|	long:=Elementos size.	p1:=self Inversa.	p2:=Pila new.	i:=1.	[i<=long.] whileTrue:[		p2 Apilar: ((p1 instVarNamed: 'Elementos') at: i).		p2 Apilar: ((p1 instVarNamed: 'Elementos') at: i).		i:=i+1.].	Elementos:= (p2 instVarNamed: 'Elementos').	! !!Pila methodsFor: 'as yet unclassified' stamp: 'HOLI 5/21/2018 11:17'!Entremezclar: p    |la lb i p1|    p1:=Pila new.    la:= Elementos size.    lb:= (p instVarNamed: 'Elementos') size.    i:=1.    (la>=lb)        ifTrue:[                [i<=la.] whileTrue: [                p1 Apilar: (Elementos at: i).                i<=lb ifTrue:[                        p1 Apilar: ((p instVarNamed: 'Elementos') at: i )                ].                    i:=i+1.            ].            .]        ifFalse:[            [i<=lb.] whileTrue: [                p1 Apilar: ((p instVarNamed: 'Elementos') at: i).                i<=la ifTrue:[                        p1 Apilar: (Elementos at: i )                ].                    i:=i+1.            ].            .].	p1:=p1 Inversa.	Elementos:= (p1 instVarNamed: 'Elementos').! !!Pila methodsFor: 'as yet unclassified' stamp: 'OLI 5/21/2018 18:01'!EsPilaVacia	|long v|		long:=Elementos size.		long=0 ifTrue:[				v:=true.]			ifFalse:[				v:=false.].				^v		! !!Pila methodsFor: 'as yet unclassified' stamp: 'HOLI 5/22/2018 16:28'!Fibonacci: num	|x y z long v|		num=1 ifTrue:[^1].	num=2 ifTrue:[^1].		self Apilar: 1.	self Apilar: 1.			long:=self Profundidad.		[long<num.] whileTrue:[					x:= self Desapilar.					"Transcript cr.					Transcript show: x."					y:= self Desapilar.					"Transcript cr.					Transcript show: y."					z:=x+y.					"Transcript cr.					Transcript show: z."					self Apilar: y.					self Apilar: x.					self Apilar: z.					long:=self Profundidad.					"Transcript show: 'aca ',long,'aca'."].		v:= self Desapilar.	^v.! !!Pila methodsFor: 'as yet unclassified' stamp: 'HOLI 5/21/2018 11:18'!Fondo	|elem long|	long:=Elementos size.	long>0 ifTrue:[		elem:=Elementos last.].	^elem.! !!Pila methodsFor: 'as yet unclassified' stamp: 'Holi 5/15/2018 18:17'!Inversa	|long i p|	long:=Elementos size.	i:=1.	p:=Pila new.	[i<=long.] whileTrue:[		p Apilar: (Elementos at:i).		i:=i+1.].	Elementos:=(p instVarNamed: 'Elementos').		"Elementos reverseDo: [ :each | Transcript show: each; cr ]."! !!Pila methodsFor: 'as yet unclassified' stamp: 'HOLI 5/23/2018 19:45'!PostFija: cadena	|str long num dig pos pn n1 n2 resultado|	str:=cadena.	long:=str size.	pn:=Pila new.		[long>0.] whileTrue: [					(long=1) ifTrue:[n2:= pn Desapilar.									 n1:= pn Desapilar.									 (str='+') ifTrue:[resultado:=n2+n1.												     ^resultado.].									 (str='-') ifTrue:[resultado:=n1-n2.												     ^resultado.].									 (str='*') ifTrue:[resultado:=n1*n2.												     ^resultado.].									 (str='/') ifTrue:[resultado:=n1/n2.												     ^resultado.].									 long:=0.]							  ifFalse:[pos:= str indexOf: $  ifAbsent: [0].									  num:= str copyFrom: 1 to: pos-1.									  dig:= num isAllDigits.									  (dig=true) ifTrue:[num asNumber.														pn Apilar: num.]												 ifFalse:[n2:= pn Desapilar.																												 n1:= pn Desapilar.														 (num='+') ifTrue:[resultado:=n1+n2.																	    pn Apilar: resultado.].														 (num='-') ifTrue:[resultado:=n1-n2.																	    pn Apilar: resultado.].														 (num='*') ifTrue:[resultado:=n1*n2.												   					    pn Apilar: resultado.].														 (num='/') ifTrue:[resultado:=n1/n2.																	    pn Apilar: (resultado asInteger).].].									 str:=str copyFrom:pos+1 to: long.									 long:=str size.].].	"Transcript show: num."	"Transcript clear.a := Pila new.a PostFija: '2 3 * 4 '.Transcript show: '*/' asNumber.Transcript show: '1233248539487523*' isAllDigits."! !!Pila methodsFor: 'as yet unclassified' stamp: 'HOLI 5/21/2018 10:23'!Profundidad	|long|	long:=Elementos size.	"Transcript cr.	Transcript show: 'La profundidad de la pila es: ',long."	^long.! !!Pila methodsFor: 'as yet unclassified' stamp: 'GRUPO2 5/15/2018 11:18'!initialize		Elementos:=OrderedCollection new.! !Object subclass: #Secuencia	instanceVariableNames: 'Sec Pila1 Pila2'	classVariableNames: ''	poolDictionaries: ''	category: 'GRUPO2_PILAS'!!Secuencia methodsFor: 'as yet unclassified' stamp: 'HOLI 5/21/2018 10:46'!Actual		|long r|	long:= Pila2 Profundidad.	long>0 ifTrue:[			r:=Pila2 Cima.].	^r.! !!Secuencia methodsFor: 'as yet unclassified' stamp: 'OLI 5/21/2018 18:40'!Avanzar	|elem p1 p2|		elem:=Pila2 Cima.	Pila2 Desapilar.		Pila1 Apilar: elem.	p1:=Pila1 deepCopy.	p2:=Pila2 deepCopy.	Sec:=p1 Inversa.	Sec:= p2 Concatenar: p1.	Sec:=(Sec instVarNamed: 'Elementos').! !!Secuencia methodsFor: 'as yet unclassified' stamp: 'HOLI 5/21/2018 09:43'!Crear: p1 and: p2		|t1 t2|		Pila1:=p1.	Pila2:= p2.		t1:=p1 deepCopy.	t2:=p2 deepCopy.		Sec:=t1 Inversa.	Sec:= t2 Concatenar: Sec.	Sec:=(Sec instVarNamed: 'Elementos')."	Transcript show: (Secuencia instVarNamed: 'Elementos')."! !!Secuencia methodsFor: 'as yet unclassified' stamp: 'HOLI 5/21/2018 10:19'!Eliminar			|s|	s:=Secuencia new.		Sec:=s.		Pila2 Desapilar.	Sec Crear: Pila1 and: Pila2.	Sec:=(Sec instVarNamed: 'Sec').! !!Secuencia methodsFor: 'as yet unclassified' stamp: 'OLI 5/21/2018 18:46'!EsSecVacia	|long1 long2 v|	long1:=(Pila1 instVarNamed: 'Elementos') size.	long2:=(Pila2 instVarNamed: 'Elementos') size.	long1=0 ifTrue:[				long2=0 ifTrue:[							v:=true.]						ifFalse:[							v:=false].]			ifFalse:[				v:=false.].				^v.! !!Secuencia methodsFor: 'as yet unclassified' stamp: 'OLI 5/21/2018 18:47'!Fin	|long v|	long:=(Pila2 instVarNamed: 'Elementos') size.		long=0 ifTrue:[				v:=true.]			ifFalse:[				v:=false.].	^v.! !!Secuencia methodsFor: 'as yet unclassified' stamp: 'HOLI 5/21/2018 09:44'!Insertar: elem	|p1 p2|		Pila1 Apilar: elem.	p1:=Pila1 deepCopy.	p2:=Pila2 deepCopy.	Sec:=p1 Inversa.	Sec:= p2 Concatenar: p1.	Sec:=(Sec instVarNamed: 'Elementos')	"Transcript cr.	Transcript show:  (Pila1 instVarNamed: 'Elementos').	Transcript cr.	Transcript show:  (Pila2 instVarNamed: 'Elementos')."! !!Secuencia methodsFor: 'as yet unclassified' stamp: 'HOLI 5/21/2018 11:15'!Reiniciar		|long i elem p1|	long:=Pila2 Profundidad.	i:=1.			[long>=i.] whileTrue: [			elem:=Pila2 Desapilar.			Pila1 Apilar: elem.			i:=i+1.].		p1:=Pila1 deepCopy.	p1 Inversa.		Sec:=(p1 instVarNamed: 'Elementos').! !!Secuencia methodsFor: 'as yet unclassified' stamp: 'HOLI 5/21/2018 09:40'!initialize		Pila1:=Pila new.		Pila2:=Pila new.		Sec:=Pila new.! !